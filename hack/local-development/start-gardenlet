#!/bin/bash -e
#
# Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source $(dirname "${0}")/common/helpers
source $(dirname "${0}")/common/local-imagevector-overwrite

REPO_ROOT=$(dirname "${0}")/../..
DEV_DIR=$REPO_ROOT/dev
EXAMPLE_DIR=$REPO_ROOT/example

kubeconfig="$KUBECONFIG"

if [[ $(k8s_env) == "$NODELESS" ]]; then
  kubeconfig="$(dirname $0)/local-garden/kubeconfigs/gardenlet.conf"
else
  mktemp_kubeconfig
  kubeconfig="$__tmp_kubeconfig"
  trap cleanup_kubeconfig EXIT
fi

GARDEN_KUBECONFIG="${GARDEN_KUBECONFIG:-$kubeconfig}"

# determine the seed to manage; if multiple seeds exist on the
# garden, the SEED_NAME env variable must be set
if [ -n "${SEED_NAME:-}" ]; then
  seedConfig="$(kubectl --kubeconfig="$GARDEN_KUBECONFIG" get seed "$SEED_NAME" -o json)"
else
  seeds="$(kubectl --kubeconfig="$GARDEN_KUBECONFIG" get seeds -o json | jq '.items')"
  case $(echo "$seeds" | jq -r 'length') in
    0)
      echo "No seed found in garden cluster."
      exit 1
      ;;
    1)
      seedConfig="$(echo "$seeds" | jq '.[0]')"
      SEED_NAME="$(echo "$seedConfig" | jq -r '.metadata.name')"
      ;;
    *)
      names="$(echo "$seeds" | jq -r -c '[.[].metadata.name]')"
      echo "Multiple seeds exist in the garden, please specify \$SEED_NAME to select one of $names"
      exit 1
      ;;
  esac
fi

# cleanup a bit to make the generated configuration file look a bit neater
seedConfig="$(echo "$seedConfig" | jq 'del(.apiVersion,.kind,.status,.metadata.annotations,.metadata.managedFields)')"

# create seed-specific configuration file if it doesn't exist yet
configFile="$DEV_DIR/20-componentconfig-gardenlet-seed-$SEED_NAME.yaml"

if [ ! -f "$configFile" ]; then
  cp "$DEV_DIR/20-componentconfig-gardenlet.yaml" "$configFile"
fi

# update gardenlet config "in-place"
cat "$configFile" | yaml2json | jq --argjson seedConfig "$seedConfig" '.seedConfig|=$seedConfig' > "$configFile.new"
mv "$configFile.new" "$configFile"

# fetch seed kubeconfig
seedKubeconfigName="$(echo "$seedConfig" | jq -r '.spec.secretRef.name')"
seedKubeconfigNamespace="$(echo "$seedConfig" | jq -r '.spec.secretRef.namespace')"
seedKubeconfig="$DEV_DIR/gardenlet-seed-$SEED_NAME.conf"

kubectl --kubeconfig="$GARDEN_KUBECONFIG" --namespace "$seedKubeconfigNamespace" get secret "$seedKubeconfigName" -o json |
  jq -r '.data.kubeconfig' |
  base64 -d > "$seedKubeconfig"

file_imagevector_overwrite="$(mktemp_imagevector_overwrite github.com/gardener/gardener "$REPO_ROOT" "$REPO_ROOT"/charts)"
if [ ! -f "$file_imagevector_overwrite" ]; then
  echo "failed to generate local image vector override: $file_imagevector_overwrite"
else
  trap cleanup_imagevector_overwrite EXIT

  echo "Starting gardenlet for seed $SEED_NAME..."

  KUBECONFIG="$seedKubeconfig" \
  GARDEN_KUBECONFIG="$GARDEN_KUBECONFIG" \
  IMAGEVECTOR_OVERWRITE="$file_imagevector_overwrite" \
  GO111MODULE=on \
      go run \
        -mod=vendor \
        -ldflags "$("$(dirname $0)"/../get-build-ld-flags.sh)" \
        "$REPO_ROOT/cmd/gardenlet/main.go" \
        --config="$configFile"
fi
