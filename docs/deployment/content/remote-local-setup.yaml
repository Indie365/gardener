apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: remote-local-setup
  labels: {component: remote-local-setup}
spec:
  selector:
    matchLabels: {component: remote-local-setup}
  template:
    metadata:
      labels: {component: remote-local-setup}
    spec:
      terminationGracePeriodSeconds: 1
      containers:
      - name: dev
        image: docker:26-dind
        command:
        - /bin/sh
        - -c
        - |
          set -ex -o pipefail
          cd
          mkdir -p ~/.cache/apk
          ln -s ~/.cache/apk /etc/apk/cache
          apk add apache2-utils bash bash-completion bat bind-tools conntrack-tools coreutils curl \
                  diffutils dnsmasq docker-bash-completion findutils fzf g++ gawk gcompat git      \
                  git-prompt go grep helm inotify-tools jq k9s less lsof make mandoc mc moreutils  \
                  mount ncurses neovim parallel procps sed strace tar tcpdump tmux tmux-doc tzdata \
                  util-linux vim wget yq
          mkdir -p ~/.cache/wget
          cd ~/.cache/wget
          if [ ! -f /root/.config/k9s/config.yaml ]; then
          echo k9s-theme       && mkdir -p ~/.config/k9s/skins \
                               && wget -N "https://raw.githubusercontent.com/derailed/k9s/master/skins/kiss.yaml" && cp kiss.yaml ~/.config/k9s/skins \
                               && yq -n '.k9s.ui.skin="kiss"' > /root/.config/k9s/config.yaml
          fi
          echo kind            && wget -N "https://kind.sigs.k8s.io/dl/$(curl -sL https://api.github.com/repos/kubernetes-sigs/kind/releases/latest | jq .tag_name -r)/kind-linux-amd64" && cp kind-linux-amd64 /usr/local/bin/kind && chmod +x /usr/local/bin/kind
          echo kns             && wget -N "https://raw.githubusercontent.com/blendle/kns/master/bin/kns" && cp kns /usr/local/bin/kns && chmod +x /usr/local/bin/kns
          echo krew            && wget -N "https://github.com/kubernetes-sigs/krew/releases/download/$(curl -sL https://api.github.com/repos/kubernetes-sigs/krew/releases/latest | jq .tag_name -r)/krew-linux_amd64.tar.gz" && tar -xzf krew-linux_amd64.tar.gz ./krew-linux_amd64 && mv krew-linux_amd64 /usr/local/bin/krew && krew install krew
          echo ktx             && wget -N "https://raw.githubusercontent.com/blendle/kns/master/bin/ktx" && cp ktx /usr/local/bin/ktx && chmod +x /usr/local/bin/ktx
          echo kube-ps1        && wget -N "https://raw.githubusercontent.com/jonmosco/kube-ps1/master/kube-ps1.sh" && cp kube-ps1.sh ~/.kube-ps1.sh
          echo kubectl         && wget -N "https://dl.k8s.io/release/$(curl -sL https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && cp kubectl /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl \
                               && ln -s "$(which kubectl)" /usr/local/bin/k
          echo tmux-completion && wget -N "https://raw.githubusercontent.com/imomaliev/tmux-bash-completion/master/completions/tmux" && cp tmux /usr/share/bash-completion/completions/tmux
          echo yaml2json       && wget -N "https://github.com/bronze1man/yaml2json/releases/download/$(curl -sL https://api.github.com/repos/bronze1man/yaml2json/releases/latest | jq .tag_name -r)/yaml2json_linux_amd64" && cp yaml2json_linux_amd64 /usr/local/bin/yaml2json && chmod +x /usr/local/bin/yaml2json
          cd
          echo delve           && go install github.com/go-delve/delve/cmd/dlv@latest
          echo gron            && go install github.com/tomnomnom/gron@latest
          echo ginkgo          && go install github.com/onsi/ginkgo/v2/ginkgo@latest
          echo neat            && krew install neat
          echo node-shell      && krew install node-shell
          bash -c "echo api.{e2e-managedseed.garden,{local,e2e-{managedseed,hib,hib-wl,unpriv,wake-up,wake-up-wl,migrate,migrate-wl,mgr-hib,rotate,rotate-wl,default,default-wl,upd-node,upd-node-wl,upgrade,upgrade-wl,upg-hib,upg-hib-wl}}.local}.{internal,external}.local.gardener.cloud \
                   | sed 's/ /\n/g' | sed 's/^/127.0.0.1 /' | sort >> /etc/hosts"
          ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime

          cat > ~/greeting.sh <<"EOF"
          [ -n "$TMUX" ] && exit
          export LANG=C.UTF-8
          normal='\e[0m'; green='\e[1;32m'; yellow='\e[1;33m'; cyan='\e[1;36m'; n=$normal; g=$green; y=$yellow; c=$cyan
          echo -e "$(
          cat <<GREETING_EOF
          ${c}Welcome${y} to the remote local setup pod of ${c}Gardener${y}!${n}

          ${c}Documentation:${n} https://github.com/gardener/gardener/blob/master/docs/deployment/getting_started_locally.md
          ${y}To ${c}exec${y} into this pod, run '${g}kubectl exec -it remote-local-setup-0 -- sh${y}'${n}

          ${y}To attach to the ${c}tmux${y} session, run '${g}tmux a${y}'${n}.
          - ${y}mouse${n} support is enabled
            - use the mouse to select panes or windows and to resize panes
            - scroll the pane content with the mouse,
              leave the "scroll mode" with '${y}q${n}' or scroll to the very bottom
            - after selecting some text, copy it with '${y}right-click${n}' or
              cancel the selection with '${y}q${n}'
            - paste the copied text with '${y}⌘ right-click${n}'
          - '${y}CTRL-b${n}, ?' is the tmux prefix: press and hold the 'CTRL' key,
              press the 'b' key, let go of both keys and then
              press e.g. the '?' key to show the keyboard shortcuts.
            '${y}d${n}' - detach from the tmux session
            '${y}c${n}' - new window
            '${y}%${n}' or '${y}\"${n}' - new pane (horizontal or vertical split)
            '${y}z${n}' - zoom in/out
            '${y},${n}' - rename the window
            '${y}]${n}','${y}=${n}' - paste (with history).
              The ${y}clipboard${n} is managed by tmux:
              copy with the ${y}mouse${n}, paste with these shortcuts or the mouse.
              You can turn off mouse reporting in the terminal emulator
              (⌘-R in the default Mac OS Terminal app) for native copy/paste.
          - '${y}CTRL-d${n}' - exit a bash session. Not be confused with 'CTRL-b, d'

          ${y}When this remote local setup pod is not needed, consider ${c}stopping${y} it
          by scaling the StatefulSet to zero replicas:${n}
            kubectl scale statefulset remote-local-setup --replicas 0

          ${y}To ${c}start${y} it, simply scale it to 1 replica:${n}
            kubectl scale statefulset remote-local-setup --replicas 1

          Note that the persistent disk with the home folder,
          the Gardener git repository, the go build cache and
          the local container registry is retained between restarts.

          ${y}The purge this environment, delete both the StatefulSet and the pvc:${n}
            kubectl delete statefulset remote-local-setup
            kubectl delete pvc    home-remote-local-setup-0
          GREETING_EOF
          )"
          if grep -q server ~/.kube/config 2>/dev/null; then
            echo
            echo -e "$(
          cat <<GREETING_EOF
          ${y}To connect to the ${c}KinD${y} cluster from your ${c}laptop${y} with kubectl, run:${n}
            kubectl exec remote-local-setup-0 -- sh -c 'cat ~/.kube/config' > kubeconfig
            kubectl port-forward remote-local-setup-0 $(< ~/.kube/config grep server | awk -F : '{print $4}')
            # in another terminal:
            export KUBECONFIG=\$PWD/kubeconfig
          GREETING_EOF
            )"
          fi
          echo
          EOF
          kubectl completion bash > /usr/share/bash-completion/completions/kubectl
          cat > ~/.bash_profile <<"EOF"
            source /etc/bash/bashrc
            source ~/.bashrc
          EOF
          cat > ~/.bashrc <<"EOF"
            export GOPATH=~/go
            export PATH=$PATH:$GOPATH/bin:~/.krew/bin:~/go/src/github.com/gardener/gardener/hack/usage
            export KUBECONFIG=~/gardener/example/gardener-local/kind/local/kubeconfig:/tmp/kubeconfig-shoot-local.yaml
            export XDG_CONFIG_HOME=~/.config
            export EDITOR=nvim
            export HISTFILESIZE=10000
            export HISTSIZE=10000
            export HISTTIMEFORMAT="%F %T "
            export HISTCONTROL=ignorespace
            export PROMPT_COMMAND='history -a'
            shopt -s histappend
            source /usr/share/bash-completion/completions/kubectl
            complete -o default -F __start_kubectl k
            source ~/.kube-ps1.sh
            source /usr/share/git-core/git-prompt.sh
            export PS1='[\w $(printf "$(kube_ps1)")] $(__git_ps1 "(%s)") [$(date +%H:%M)]\$ '
            stty -ixon
            cd ~/go/src/github.com/gardener/gardener
          EOF
          cat > ~/.tmux.conf <<"EOF"
            set -g mouse on
            bind -T copy-mode-vi MouseDown3Pane send -X copy-selection-and-cancel
            bind -T copy-mode-vi MouseDown2Pane send -X copy-selection # Command right-click to copy without leaving the copy mode
            bind -T copy-mode-vi MouseDragEnd1Pane send -X select-pane
            set -g mode-keys vi
            set -g default-shell /bin/bash
            set -g pane-border-status top
            set -g pane-border-format " #{pane_index} #{pane_title} - #{pane_current_command} "
            set -g window-size smallest
          EOF
          mkdir -p ~/go/src/github.com/gardener
          cd ~/go/src/github.com/gardener
          [ -d gardener/.git ] || git clone -q https://github.com/gardener/gardener
          nice dockerd-entrypoint.sh 2>&1 | tee ~/.dockerd.log &
          until docker ps >/dev/null 2>&1; do sleep 1; done
          tmux new -d -s gardener -n gardener
          tmux select-pane -T top
          tmux send top Enter; sleep 1; tmux send 1; sleep 1; tmux send C; sleep 1; tmux send i; sleep 1; tmux send t; sleep 1; tmux send V; sleep 1; tmux send s; sleep 1; tmux send 5 Enter
          tmux split-window \; select-pane -T kind     ; sleep 1; tmux send "make kind-up # Set up KinD cluster (Garden and Seed)" \; select-layout even-vertical
          tmux split-window \; select-pane -T gardener ; sleep 1; tmux send "make gardener-up # Set up Gardener"\; select-layout even-vertical
          tmux split-window \; select-pane -T shoot    ; sleep 1; tmux send "kubectl apply -f example/provider-local/shoot.yaml # Create a new shoot cluster "\; select-layout even-vertical
          tmux split-window \; select-pane -T config   ; sleep 1; tmux send "./hack/usage/generate-admin-kubeconf.sh > /tmp/kubeconfig-shoot-local.yaml # Get Kubeconfig for Shoot" \; select-layout even-vertical
          tmux split-window \; select-pane -T config   ; sleep 1; tmux send "make test-e2e-local-simple" # Run simple e2e test (create and delete shoot) \; select-layout even-vertical
          touch /tmp/ready
          wait
        startupProbe:
          exec: {command: [cat, /tmp/ready]}
          failureThreshold: 18
        env: [{name: ENV, value: /root/greeting.sh}] # ash sources the ENV file
        resources:
          requests: {cpu: 14, memory: 28G}
          limits:   {cpu: 14, memory: 28G}
        securityContext:
          privileged: true
        volumeMounts:
        # Without bind mounting `/sys/fs/cgroup` the nested shoot worker node failed in this DinD pod.
        # Due to bind mounting `/sys/fs/cgroup` from the host, the docker containers in this DinD pod (i.e. the KinD cluster)
        # use a top level cgroup and hence are not constrained by the resource limits of this pod.
        # The host cgroups might leak until the nodes are recreated e.g. when the hosting Gardener dev shoot cluster is hibernated.
        # To avoid conflicts on the top level docker cgroup, only one remote-local-setup pod per node is recommended which is enforced by the high resource requests.
        # See
        # https://github.com/kubernetes-sigs/kind/issues/303
        # https://github.com/kubernetes/test-infra/blob/dcf27e157932c3e8680be4ae6cb8a4e2c7acf8cf/config/prow/config.yaml#L978-L988
        # https://github.com/gardener/ci-infra/blob/dff565bced0f386dd1acb0743beb3831dae6c10d/config/prow/config.yaml#L288-L298
        - {name: cgroup,  mountPath: /sys/fs/cgroup}
        - {name: home,    mountPath: /root}
        - {name: home,    mountPath: /var/lib/docker, subPath: .docker}
        - {name: modules, mountPath: /lib/modules, readOnly: true}
      volumes:
      - {name: cgroup,  hostPath: {type: Directory, path: /sys/fs/cgroup}}
      - {name: modules, hostPath: {type: Directory, path: /lib/modules}}
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata: {name: home}
    spec:
      accessModes: [ReadWriteOnce]
      resources: {requests: {storage: 80Gi}}
      volumeMode: Filesystem
