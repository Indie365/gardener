// Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package manager

import (
	"context"

	secretutils "github.com/gardener/gardener/pkg/utils/secrets"

	corev1 "k8s.io/api/core/v1"
)

// Interface describes the methods for managing secrets.
type Interface interface {
	// GetOrGenerate gets or generates a secret based on the provided configuration. It should automatically rotate/re-
	// generate the secret if necessary (e.g., when the config or the signing CA changes).
	GetOrGenerate(context.Context, secretutils.ConfigInterface, ...GetOrGenerateOption) (*corev1.Secret, error)
	// GetByName returns the secret object for the secret with the given name. By default, the bundle secret will be
	// returned. If there is no bundle secret then it falls back to the current secret. Note that only those secrets are
	// known which were detected or generated by prior GetOrGenerate calls.
	GetByName(string, ...GetByNameOption) (*corev1.Secret, error)
	// Cleanup deletes no longer required secrets. No longer required secrets are those still existing in the system
	// which weren't detected by prior GetOrGenerate calls. Consequently, only call Cleanup after you have executed
	// GetOrGenerate calls for all desired secrets.
	Cleanup(context.Context) error
}
