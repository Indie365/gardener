// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gardener/gardener/pkg/apis/extensions/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GenericLister helps list Generics.
type GenericLister interface {
	// List lists all Generics in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Generic, err error)
	// Generics returns an object that can list and get Generics.
	Generics(namespace string) GenericNamespaceLister
	GenericListerExpansion
}

// genericLister implements the GenericLister interface.
type genericLister struct {
	indexer cache.Indexer
}

// NewGenericLister returns a new GenericLister.
func NewGenericLister(indexer cache.Indexer) GenericLister {
	return &genericLister{indexer: indexer}
}

// List lists all Generics in the indexer.
func (s *genericLister) List(selector labels.Selector) (ret []*v1alpha1.Generic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Generic))
	})
	return ret, err
}

// Generics returns an object that can list and get Generics.
func (s *genericLister) Generics(namespace string) GenericNamespaceLister {
	return genericNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GenericNamespaceLister helps list and get Generics.
type GenericNamespaceLister interface {
	// List lists all Generics in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Generic, err error)
	// Get retrieves the Generic from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Generic, error)
	GenericNamespaceListerExpansion
}

// genericNamespaceLister implements the GenericNamespaceLister
// interface.
type genericNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Generics in the indexer for a given namespace.
func (s genericNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Generic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Generic))
	})
	return ret, err
}

// Get retrieves the Generic from the indexer for a given namespace and name.
func (s genericNamespaceLister) Get(name string) (*v1alpha1.Generic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("generic"), name)
	}
	return obj.(*v1alpha1.Generic), nil
}
