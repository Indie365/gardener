// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener/pkg/gardenlet/controller/shootleftover (interfaces: Actuator,Cleaner,CleanerFactory)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/gardener/external-dns-management/pkg/apis/dns/v1alpha1"
	v1alpha10 "github.com/gardener/gardener/pkg/apis/core/v1alpha1"
	v1alpha11 "github.com/gardener/gardener/pkg/apis/extensions/v1alpha1"
	shootleftover "github.com/gardener/gardener/pkg/gardenlet/controller/shootleftover"
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	v1 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockActuator is a mock of Actuator interface.
type MockActuator struct {
	ctrl     *gomock.Controller
	recorder *MockActuatorMockRecorder
}

// MockActuatorMockRecorder is the mock recorder for MockActuator.
type MockActuatorMockRecorder struct {
	mock *MockActuator
}

// NewMockActuator creates a new mock instance.
func NewMockActuator(ctrl *gomock.Controller) *MockActuator {
	mock := &MockActuator{ctrl: ctrl}
	mock.recorder = &MockActuatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActuator) EXPECT() *MockActuatorMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockActuator) Delete(arg0 context.Context, arg1 *v1alpha10.ShootLeftover) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockActuatorMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActuator)(nil).Delete), arg0, arg1)
}

// Reconcile mocks base method.
func (m *MockActuator) Reconcile(arg0 context.Context, arg1 *v1alpha10.ShootLeftover) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reconcile indicates an expected call of Reconcile.
func (mr *MockActuatorMockRecorder) Reconcile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockActuator)(nil).Reconcile), arg0, arg1)
}

// MockCleaner is a mock of Cleaner interface.
type MockCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockCleanerMockRecorder
}

// MockCleanerMockRecorder is the mock recorder for MockCleaner.
type MockCleanerMockRecorder struct {
	mock *MockCleaner
}

// NewMockCleaner creates a new mock instance.
func NewMockCleaner(ctrl *gomock.Controller) *MockCleaner {
	mock := &MockCleaner{ctrl: ctrl}
	mock.recorder = &MockCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCleaner) EXPECT() *MockCleanerMockRecorder {
	return m.recorder
}

// DeleteBackupEntry mocks base method.
func (m *MockCleaner) DeleteBackupEntry(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupEntry", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackupEntry indicates an expected call of DeleteBackupEntry.
func (mr *MockCleanerMockRecorder) DeleteBackupEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupEntry", reflect.TypeOf((*MockCleaner)(nil).DeleteBackupEntry), arg0)
}

// DeleteCluster mocks base method.
func (m *MockCleaner) DeleteCluster(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockCleanerMockRecorder) DeleteCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockCleaner)(nil).DeleteCluster), arg0)
}

// DeleteDNSEntries mocks base method.
func (m *MockCleaner) DeleteDNSEntries(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNSEntries", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDNSEntries indicates an expected call of DeleteDNSEntries.
func (mr *MockCleanerMockRecorder) DeleteDNSEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNSEntries", reflect.TypeOf((*MockCleaner)(nil).DeleteDNSEntries), arg0)
}

// DeleteDNSOwners mocks base method.
func (m *MockCleaner) DeleteDNSOwners(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNSOwners", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDNSOwners indicates an expected call of DeleteDNSOwners.
func (mr *MockCleanerMockRecorder) DeleteDNSOwners(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNSOwners", reflect.TypeOf((*MockCleaner)(nil).DeleteDNSOwners), arg0)
}

// DeleteDNSProviders mocks base method.
func (m *MockCleaner) DeleteDNSProviders(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNSProviders", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDNSProviders indicates an expected call of DeleteDNSProviders.
func (mr *MockCleanerMockRecorder) DeleteDNSProviders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNSProviders", reflect.TypeOf((*MockCleaner)(nil).DeleteDNSProviders), arg0)
}

// DeleteEtcds mocks base method.
func (m *MockCleaner) DeleteEtcds(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEtcds", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEtcds indicates an expected call of DeleteEtcds.
func (mr *MockCleanerMockRecorder) DeleteEtcds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEtcds", reflect.TypeOf((*MockCleaner)(nil).DeleteEtcds), arg0)
}

// DeleteExtensionObjects mocks base method.
func (m *MockCleaner) DeleteExtensionObjects(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExtensionObjects", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtensionObjects indicates an expected call of DeleteExtensionObjects.
func (mr *MockCleanerMockRecorder) DeleteExtensionObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtensionObjects", reflect.TypeOf((*MockCleaner)(nil).DeleteExtensionObjects), arg0)
}

// DeleteManagedResources mocks base method.
func (m *MockCleaner) DeleteManagedResources(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManagedResources", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManagedResources indicates an expected call of DeleteManagedResources.
func (mr *MockCleanerMockRecorder) DeleteManagedResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManagedResources", reflect.TypeOf((*MockCleaner)(nil).DeleteManagedResources), arg0)
}

// DeleteNamespace mocks base method.
func (m *MockCleaner) DeleteNamespace(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamespace", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamespace indicates an expected call of DeleteNamespace.
func (mr *MockCleanerMockRecorder) DeleteNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespace", reflect.TypeOf((*MockCleaner)(nil).DeleteNamespace), arg0)
}

// DeleteSecrets mocks base method.
func (m *MockCleaner) DeleteSecrets(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecrets", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecrets indicates an expected call of DeleteSecrets.
func (mr *MockCleanerMockRecorder) DeleteSecrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecrets", reflect.TypeOf((*MockCleaner)(nil).DeleteSecrets), arg0)
}

// GetBackupEntry mocks base method.
func (m *MockCleaner) GetBackupEntry(arg0 context.Context) (*v1alpha11.BackupEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupEntry", arg0)
	ret0, _ := ret[0].(*v1alpha11.BackupEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupEntry indicates an expected call of GetBackupEntry.
func (mr *MockCleanerMockRecorder) GetBackupEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupEntry", reflect.TypeOf((*MockCleaner)(nil).GetBackupEntry), arg0)
}

// GetCluster mocks base method.
func (m *MockCleaner) GetCluster(arg0 context.Context) (*v1alpha11.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0)
	ret0, _ := ret[0].(*v1alpha11.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockCleanerMockRecorder) GetCluster(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockCleaner)(nil).GetCluster), arg0)
}

// GetDNSOwners mocks base method.
func (m *MockCleaner) GetDNSOwners(arg0 context.Context) ([]v1alpha1.DNSOwner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSOwners", arg0)
	ret0, _ := ret[0].([]v1alpha1.DNSOwner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSOwners indicates an expected call of GetDNSOwners.
func (mr *MockCleanerMockRecorder) GetDNSOwners(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSOwners", reflect.TypeOf((*MockCleaner)(nil).GetDNSOwners), arg0)
}

// GetNamespace mocks base method.
func (m *MockCleaner) GetNamespace(arg0 context.Context) (*v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", arg0)
	ret0, _ := ret[0].(*v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockCleanerMockRecorder) GetNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockCleaner)(nil).GetNamespace), arg0)
}

// MigrateBackupEntry mocks base method.
func (m *MockCleaner) MigrateBackupEntry(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateBackupEntry", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateBackupEntry indicates an expected call of MigrateBackupEntry.
func (mr *MockCleanerMockRecorder) MigrateBackupEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateBackupEntry", reflect.TypeOf((*MockCleaner)(nil).MigrateBackupEntry), arg0)
}

// MigrateExtensionObjects mocks base method.
func (m *MockCleaner) MigrateExtensionObjects(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateExtensionObjects", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateExtensionObjects indicates an expected call of MigrateExtensionObjects.
func (mr *MockCleanerMockRecorder) MigrateExtensionObjects(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateExtensionObjects", reflect.TypeOf((*MockCleaner)(nil).MigrateExtensionObjects), arg0)
}

// SetKeepObjectsForManagedResources mocks base method.
func (m *MockCleaner) SetKeepObjectsForManagedResources(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetKeepObjectsForManagedResources", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetKeepObjectsForManagedResources indicates an expected call of SetKeepObjectsForManagedResources.
func (mr *MockCleanerMockRecorder) SetKeepObjectsForManagedResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepObjectsForManagedResources", reflect.TypeOf((*MockCleaner)(nil).SetKeepObjectsForManagedResources), arg0)
}

// WaitUntilBackupEntryDeleted mocks base method.
func (m *MockCleaner) WaitUntilBackupEntryDeleted(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilBackupEntryDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBackupEntryDeleted indicates an expected call of WaitUntilBackupEntryDeleted.
func (mr *MockCleanerMockRecorder) WaitUntilBackupEntryDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBackupEntryDeleted", reflect.TypeOf((*MockCleaner)(nil).WaitUntilBackupEntryDeleted), arg0)
}

// WaitUntilBackupEntryMigrated mocks base method.
func (m *MockCleaner) WaitUntilBackupEntryMigrated(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilBackupEntryMigrated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilBackupEntryMigrated indicates an expected call of WaitUntilBackupEntryMigrated.
func (mr *MockCleanerMockRecorder) WaitUntilBackupEntryMigrated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilBackupEntryMigrated", reflect.TypeOf((*MockCleaner)(nil).WaitUntilBackupEntryMigrated), arg0)
}

// WaitUntilClusterDeleted mocks base method.
func (m *MockCleaner) WaitUntilClusterDeleted(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilClusterDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilClusterDeleted indicates an expected call of WaitUntilClusterDeleted.
func (mr *MockCleanerMockRecorder) WaitUntilClusterDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilClusterDeleted", reflect.TypeOf((*MockCleaner)(nil).WaitUntilClusterDeleted), arg0)
}

// WaitUntilDNSEntriesDeleted mocks base method.
func (m *MockCleaner) WaitUntilDNSEntriesDeleted(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilDNSEntriesDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDNSEntriesDeleted indicates an expected call of WaitUntilDNSEntriesDeleted.
func (mr *MockCleanerMockRecorder) WaitUntilDNSEntriesDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDNSEntriesDeleted", reflect.TypeOf((*MockCleaner)(nil).WaitUntilDNSEntriesDeleted), arg0)
}

// WaitUntilDNSOwnersDeleted mocks base method.
func (m *MockCleaner) WaitUntilDNSOwnersDeleted(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilDNSOwnersDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDNSOwnersDeleted indicates an expected call of WaitUntilDNSOwnersDeleted.
func (mr *MockCleanerMockRecorder) WaitUntilDNSOwnersDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDNSOwnersDeleted", reflect.TypeOf((*MockCleaner)(nil).WaitUntilDNSOwnersDeleted), arg0)
}

// WaitUntilDNSProvidersDeleted mocks base method.
func (m *MockCleaner) WaitUntilDNSProvidersDeleted(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilDNSProvidersDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilDNSProvidersDeleted indicates an expected call of WaitUntilDNSProvidersDeleted.
func (mr *MockCleanerMockRecorder) WaitUntilDNSProvidersDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilDNSProvidersDeleted", reflect.TypeOf((*MockCleaner)(nil).WaitUntilDNSProvidersDeleted), arg0)
}

// WaitUntilEtcdsDeleted mocks base method.
func (m *MockCleaner) WaitUntilEtcdsDeleted(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilEtcdsDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilEtcdsDeleted indicates an expected call of WaitUntilEtcdsDeleted.
func (mr *MockCleanerMockRecorder) WaitUntilEtcdsDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilEtcdsDeleted", reflect.TypeOf((*MockCleaner)(nil).WaitUntilEtcdsDeleted), arg0)
}

// WaitUntilExtensionObjectsDeleted mocks base method.
func (m *MockCleaner) WaitUntilExtensionObjectsDeleted(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilExtensionObjectsDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilExtensionObjectsDeleted indicates an expected call of WaitUntilExtensionObjectsDeleted.
func (mr *MockCleanerMockRecorder) WaitUntilExtensionObjectsDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilExtensionObjectsDeleted", reflect.TypeOf((*MockCleaner)(nil).WaitUntilExtensionObjectsDeleted), arg0)
}

// WaitUntilExtensionObjectsMigrated mocks base method.
func (m *MockCleaner) WaitUntilExtensionObjectsMigrated(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilExtensionObjectsMigrated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilExtensionObjectsMigrated indicates an expected call of WaitUntilExtensionObjectsMigrated.
func (mr *MockCleanerMockRecorder) WaitUntilExtensionObjectsMigrated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilExtensionObjectsMigrated", reflect.TypeOf((*MockCleaner)(nil).WaitUntilExtensionObjectsMigrated), arg0)
}

// WaitUntilManagedResourcesDeleted mocks base method.
func (m *MockCleaner) WaitUntilManagedResourcesDeleted(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilManagedResourcesDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilManagedResourcesDeleted indicates an expected call of WaitUntilManagedResourcesDeleted.
func (mr *MockCleanerMockRecorder) WaitUntilManagedResourcesDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilManagedResourcesDeleted", reflect.TypeOf((*MockCleaner)(nil).WaitUntilManagedResourcesDeleted), arg0)
}

// WaitUntilNamespaceDeleted mocks base method.
func (m *MockCleaner) WaitUntilNamespaceDeleted(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitUntilNamespaceDeleted", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilNamespaceDeleted indicates an expected call of WaitUntilNamespaceDeleted.
func (mr *MockCleanerMockRecorder) WaitUntilNamespaceDeleted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilNamespaceDeleted", reflect.TypeOf((*MockCleaner)(nil).WaitUntilNamespaceDeleted), arg0)
}

// MockCleanerFactory is a mock of CleanerFactory interface.
type MockCleanerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockCleanerFactoryMockRecorder
}

// MockCleanerFactoryMockRecorder is the mock recorder for MockCleanerFactory.
type MockCleanerFactoryMockRecorder struct {
	mock *MockCleanerFactory
}

// NewMockCleanerFactory creates a new mock instance.
func NewMockCleanerFactory(ctrl *gomock.Controller) *MockCleanerFactory {
	mock := &MockCleanerFactory{ctrl: ctrl}
	mock.recorder = &MockCleanerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCleanerFactory) EXPECT() *MockCleanerFactoryMockRecorder {
	return m.recorder
}

// NewCleaner mocks base method.
func (m *MockCleanerFactory) NewCleaner(arg0 client.Client, arg1, arg2 string, arg3 logr.Logger, arg4 logrus.FieldLogger) shootleftover.Cleaner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCleaner", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(shootleftover.Cleaner)
	return ret0
}

// NewCleaner indicates an expected call of NewCleaner.
func (mr *MockCleanerFactoryMockRecorder) NewCleaner(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCleaner", reflect.TypeOf((*MockCleanerFactory)(nil).NewCleaner), arg0, arg1, arg2, arg3, arg4)
}
