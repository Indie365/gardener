// Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kubeapiserver

import (
	"context"

	v1beta1constants "github.com/gardener/gardener/pkg/apis/core/v1beta1/constants"
	"github.com/gardener/gardener/pkg/controllerutils"
	"github.com/gardener/gardener/pkg/operation/botanist/component"
	kutil "github.com/gardener/gardener/pkg/utils/kubernetes"

	appsv1 "k8s.io/api/apps/v1"
	autoscalingv2beta1 "k8s.io/api/autoscaling/v2beta1"
	corev1 "k8s.io/api/core/v1"
	policyv1beta1 "k8s.io/api/policy/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

const (
	// Port is the port exposed by the kube-apiserver.
	Port = 443
)

// Interface contains functions for a kube-apiserver deployer.
type Interface interface {
	component.DeployWaiter
	// GetValues returns the current configuration values of the deployer.
	GetValues() Values
	// SetAutoscalingReplicas sets the Replicas field in the AutoscalingConfig of the Values of the deployer.
	SetAutoscalingReplicas(*int32)
}

// Values contains configuration values for the kube-apiserver resources.
type Values struct {
	// Autoscaling contains information for configuring autoscaling settings for the kube-apiserver.
	Autoscaling AutoscalingConfig
}

// AutoscalingConfig contains information for configuring autoscaling settings for the kube-apiserver.
type AutoscalingConfig struct {
	// HVPAEnabled states whether an HVPA object shall be deployed. If false, HPA and VPA will be used.
	HVPAEnabled bool
	// Replicas is the number of pod replicas for the kube-apiserver.
	Replicas *int32
	// MinReplicas are the minimum Replicas for horizontal autoscaling.
	MinReplicas int32
	// MaxReplicas are the maximum Replicas for horizontal autoscaling.
	MaxReplicas int32
}

// New creates a new instance of DeployWaiter for the kube-apiserver.
func New(client client.Client, namespace string, values Values) Interface {
	return &kubeAPIServer{
		client:    client,
		namespace: namespace,
		values:    values,
	}
}

type kubeAPIServer struct {
	client    client.Client
	namespace string
	values    Values
}

func (k *kubeAPIServer) Deploy(ctx context.Context) error {
	var (
		hpaTargetAverageUtilizationCPU    int32 = 80
		hpaTargetAverageUtilizationMemory int32 = 80
		pdbMaxUnavailable                       = intstr.FromInt(1)

		needsHPA = !k.values.Autoscaling.HVPAEnabled && k.values.Autoscaling.Replicas != nil && *k.values.Autoscaling.Replicas > 0

		horizontalPodAutoscaler = k.emptyHorizontalPodAutoscaler()
		podDisruptionBudget     = k.emptyPodDisruptionBudget()
	)

	if _, err := controllerutils.GetAndCreateOrMergePatch(ctx, k.client, podDisruptionBudget, func() error {
		podDisruptionBudget.Labels = getLabels()
		podDisruptionBudget.Spec = policyv1beta1.PodDisruptionBudgetSpec{
			MaxUnavailable: &pdbMaxUnavailable,
			Selector:       &metav1.LabelSelector{MatchLabels: getLabels()},
		}
		return nil
	}); err != nil {
		return err
	}

	if needsHPA {
		if _, err := controllerutils.GetAndCreateOrMergePatch(ctx, k.client, horizontalPodAutoscaler, func() error {
			horizontalPodAutoscaler.Spec = autoscalingv2beta1.HorizontalPodAutoscalerSpec{
				MinReplicas: &k.values.Autoscaling.MinReplicas,
				MaxReplicas: k.values.Autoscaling.MaxReplicas,
				ScaleTargetRef: autoscalingv2beta1.CrossVersionObjectReference{
					APIVersion: appsv1.SchemeGroupVersion.String(),
					Kind:       "Deployment",
					// TODO: Replace with `deployment.Name` once the Deployment is generated by this component.
					Name: v1beta1constants.DeploymentNameKubeAPIServer,
				},
				Metrics: []autoscalingv2beta1.MetricSpec{
					{
						Type: autoscalingv2beta1.ResourceMetricSourceType,
						Resource: &autoscalingv2beta1.ResourceMetricSource{
							Name:                     corev1.ResourceCPU,
							TargetAverageUtilization: &hpaTargetAverageUtilizationCPU,
						},
					},
					{
						Type: autoscalingv2beta1.ResourceMetricSourceType,
						Resource: &autoscalingv2beta1.ResourceMetricSource{
							Name:                     corev1.ResourceMemory,
							TargetAverageUtilization: &hpaTargetAverageUtilizationMemory,
						},
					},
				},
			}
			return nil
		}); err != nil {
			return err
		}
	} else {
		if err := kutil.DeleteObject(ctx, k.client, horizontalPodAutoscaler); err != nil {
			return err
		}
	}

	return nil
}

func (k *kubeAPIServer) Destroy(ctx context.Context) error {
	return kutil.DeleteObjects(ctx, k.client,
		k.emptyHorizontalPodAutoscaler(),
		k.emptyPodDisruptionBudget(),
	)
}

func (k *kubeAPIServer) Wait(_ context.Context) error        { return nil }
func (k *kubeAPIServer) WaitCleanup(_ context.Context) error { return nil }

func (k *kubeAPIServer) GetValues() Values {
	return k.values
}
func (k *kubeAPIServer) SetAutoscalingReplicas(replicas *int32) {
	k.values.Autoscaling.Replicas = replicas
}

func (k *kubeAPIServer) emptyHorizontalPodAutoscaler() *autoscalingv2beta1.HorizontalPodAutoscaler {
	return &autoscalingv2beta1.HorizontalPodAutoscaler{ObjectMeta: metav1.ObjectMeta{Name: v1beta1constants.DeploymentNameKubeAPIServer, Namespace: k.namespace}}
}

func (k *kubeAPIServer) emptyPodDisruptionBudget() *policyv1beta1.PodDisruptionBudget {
	return &policyv1beta1.PodDisruptionBudget{ObjectMeta: metav1.ObjectMeta{Name: v1beta1constants.DeploymentNameKubeAPIServer, Namespace: k.namespace}}
}

func getLabels() map[string]string {
	return map[string]string{
		v1beta1constants.LabelApp:  v1beta1constants.LabelKubernetes,
		v1beta1constants.LabelRole: v1beta1constants.LabelAPIServer,
	}
}
