// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// scripts/execute-cloud-config.tpl.sh
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsExecuteCloudConfigTplSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x73\xda\x3a\x16\x7f\xf7\xa7\x38\x75\x99\x26\xdc\x89\xe0\xf6\xce\xdd\x7d\xe0\x5e\x3a\x4b\x81\xb6\x99\x26\x90\x01\x9a\x9d\xbb\xdb\x0e\x15\xd6\x21\xa8\xd8\x92\x2b\xc9\x49\x53\xc2\x77\xdf\x91\x64\x3b\x26\x98\x24\xfb\x70\x9f\xb0\xe5\xa3\x9f\xce\xdf\xdf\x39\xe2\xe5\x8b\xf6\x82\x8b\xf6\x82\xea\x15\x10\xcc\x82\xe0\xa2\x37\xfb\x30\xef\x9f\x8d\x3f\x0d\xfa\xe3\xd1\xbb\xd3\xf7\xf3\xc1\xf8\xdf\xa3\xb3\x71\x6f\x30\x9c\xcc\xa7\xc3\xc9\xe5\x70\xd2\x0d\x37\x1b\x68\xa5\xd4\xac\xfa\x0a\x19\x0a\xc3\x69\xac\xa7\xa8\xae\x51\xc1\x76\x1b\x3e\x8a\xd0\xef\xcd\xfb\xc3\xc9\xac\x16\xa2\xdf\xeb\xa3\x32\xb5\x10\xf7\xf2\x03\x79\x23\x62\x49\x19\xb2\x7e\x2c\x33\xd6\x97\x62\xc9\xaf\xea\x8f\x1d\x9f\x0d\xba\x61\x63\xf3\x70\x7d\xdb\x92\x31\x2b\xc4\x3f\x0c\xfb\x1f\xa7\x9f\xce\x6b\xf1\x57\x18\xad\x75\x96\x54\xc0\xfb\x83\xf9\xb4\x3f\x39\xbd\xa8\xea\xdf\x1f\x4c\x23\xc5\x53\x53\x27\x56\x83\x5f\xca\x3f\x06\x5f\xee\xdb\xb5\x61\xff\x7b\x6e\x4b\xb2\x66\x5c\x01\x49\x61\xcf\x0c\x3d\xe0\x0a\x23\x23\xd5\xad\x3d\xe7\xfe\xfb\xc7\x6c\x81\x31\x9a\x9d\xaf\x41\xb0\xcc\x44\x64\xb8\x14\xc0\x64\xb4\x46\x45\x52\x85\x16\xe4\xb8\x09\x9b\x00\x40\xd0\x04\xbb\x61\xe3\x75\x18\x00\xf0\x84\x5e\xd9\x97\xdf\xec\x0b\x46\x2b\x09\xa1\x33\x88\x8b\x2b\xb8\x59\xa1\x59\xa1\x02\x23\x21\x07\x80\x86\xdd\x0b\x4b\x25\x13\x68\xb8\xad\x0e\x63\x09\xff\x05\xf2\x13\x1a\xc7\xfe\x38\x0f\xaa\x81\x7c\x87\x30\x97\x6a\xc2\x97\x3f\xc0\xac\x50\x04\x00\xc5\x39\x17\x1e\xd3\x9e\x54\x0b\x0b\xb9\xf6\x90\x66\x71\x5c\x22\x59\x35\x63\x8d\x15\x9c\x91\x04\x81\xc8\x9e\x54\x73\xc9\x83\x6d\x10\x6c\x36\x56\xdf\xd6\x3a\xf7\x1b\x35\xf4\x52\xc6\x59\x82\x40\xb6\xdb\x7b\xbf\x2d\xa5\x4a\xa8\x21\x8c\x1a\x4a\x18\x5e\xf3\x08\x73\xdf\x9d\xf5\xde\x0e\xcf\xba\x1f\x3f\xbd\x1d\x0e\x86\x97\xde\xf6\x17\xb0\x88\xd7\x9c\x01\x21\x31\x5d\x60\x0c\x0d\x27\x03\x6f\xda\x0c\xaf\xdb\x22\x8b\xe3\x8a\xe5\x83\xe1\xe5\x69\x7f\x38\xed\x36\x8e\x63\xbd\x88\xd7\x40\xd8\x42\x8b\x0b\x20\x12\x46\xbd\xf3\xe1\xc9\x45\x6f\x32\x9b\xfd\x75\x31\x3c\x79\x37\x75\x3f\xd3\xd3\xff\x0c\x9b\x6e\xe3\x79\x6f\xd6\xff\x70\x3a\x7a\x3f\xbf\x47\xf0\xd6\x37\xf2\x85\x10\xee\xe0\x4a\x61\x0a\x47\x05\x48\x37\x0c\x5b\xbf\x78\x20\xf7\x68\xc1\x7c\xfe\xee\x19\xdf\xd2\xfc\x27\xda\xd4\x39\x6a\x56\x1c\x7b\x4e\x4d\xb4\xb2\xe1\xc9\xe5\xc1\xba\x03\xbc\x3b\x60\x71\x0b\x6e\x53\x07\x1e\x47\x74\x78\xb3\xde\xe4\xfd\x70\x96\xeb\x3e\xb7\xa6\xde\xeb\xff\xd0\x32\x6b\xc8\x0a\x29\x03\x22\x5e\xc3\x1d\x44\x99\x01\xb2\xfc\x0d\x08\xfb\x1c\x56\x95\x63\x68\x30\x32\xc8\x6a\x95\x6b\xec\x1f\xe8\x15\x49\xd6\x4b\xdd\xc2\x1f\xe6\x77\x20\x67\x45\xa0\xc8\x18\xbe\x67\xd2\x50\x20\x43\x88\xe9\xcf\xdb\x39\x37\x74\x11\xe3\x9c\x0b\x6e\xba\xbf\x9e\xb8\xa5\x6f\x32\x53\x82\xc6\xc5\x9a\x93\x37\xb7\x29\x76\x33\xad\xdc\x4b\xe7\x4a\xa5\xfe\x21\x55\xdf\x3c\x1c\xb8\x04\xa8\x51\xa5\x62\x85\xcf\x33\x6b\x06\x15\x0c\x5c\xfe\x20\x7b\xae\x29\x96\x2b\xda\x26\x49\xdb\xd7\x54\xc5\x7c\x11\xa5\x7e\x5d\x66\xc2\xe4\x79\x9a\x5b\xb8\x2f\xe4\x4f\x77\xa2\xb6\x72\x30\x49\x21\x92\xe9\x2d\x58\x48\x4b\x1b\xcf\x51\x20\x4a\x81\x50\xb0\xb8\xed\x98\x2f\xda\xbf\xec\x1e\xd3\x76\x32\x99\xd7\xe6\x90\x02\x91\x4c\x39\xb2\x12\xc3\x96\xf0\xf3\x6c\xaf\xb1\xb1\xc0\x20\x12\x18\x2e\x69\x16\x1b\x7d\x52\xc4\xe2\x04\x95\x92\x4a\x77\x15\xba\x9d\x44\xc9\x1a\x2f\x94\x08\xcf\x73\x80\xa7\x93\x7d\xa2\x08\x36\x1b\x02\x28\x18\x6c\x3d\xdb\x28\x2a\xae\xd0\x33\xd2\x49\xce\x46\xd0\xe9\x42\xab\x20\xc9\xed\x36\xd8\x65\x69\x47\xee\x9e\xc1\x0a\xaa\xcf\xb7\xd9\x72\xda\x6c\x4a\xf0\x88\x1a\xf8\xf3\x4f\x38\x1a\x8e\xdf\x1d\xc1\x1d\x2c\xa8\xc6\x7f\xfe\x0e\x84\xc1\x1b\x08\x1b\x0f\xbb\xa5\xdb\xd9\x8a\xee\x7b\xed\x27\x8d\xca\xd6\xab\x85\x1a\x8e\xdf\x05\x81\xa3\xf1\x17\x40\x96\x35\xbb\x6d\xff\x0a\x2b\x1c\x6e\x64\x16\xad\x0e\xc9\x05\x4b\x5e\x87\x56\xdf\x15\x0f\xa3\x1e\x90\x2f\xd1\x0b\xf8\x07\xad\xd0\xfe\x44\xce\xc2\x09\xd2\xd8\xb9\xf0\xcb\x17\xb8\xbb\x3b\xb8\xa1\xda\x3b\xdb\xe9\x9a\xb7\x73\x46\x21\x51\xcc\x51\x18\x12\x65\x4a\xa1\x30\xad\x14\x13\x0b\x55\x6a\xeb\xdd\x3f\x1c\xbf\xb3\xfe\x3e\xa8\xc4\x5b\x29\x8d\x36\x8a\xa6\x2e\x7a\x84\x90\x80\xa6\xfc\x12\x95\xe6\x52\x74\xe0\xfa\x75\xb0\xe6\x82\x75\xc0\xc7\x24\xc8\xcf\x22\x91\x14\x06\x7f\x98\x4e\xc1\x6e\x64\x51\xc0\xfc\x2b\x4f\xee\x20\x8a\x33\x6d\x50\xe9\x4e\x40\x20\x7f\xee\xf8\xba\x44\x65\xf8\x92\x47\xd4\x20\xa1\x99\x59\x49\xc5\xcd\xad\xcb\xd0\x0e\x34\x8e\xad\xd6\x35\x71\xdb\x1f\xed\xc2\xfb\x94\xba\x03\xa3\x6c\x5e\x1d\x7d\x16\x79\x83\xd0\x6e\x4a\x7c\x1e\x9e\x1f\x36\x1d\x79\xdb\xa4\xee\x40\x69\x81\x37\xd2\x5b\x90\x1b\xec\x2d\xc8\xcd\x29\x25\x1d\x95\x68\xbb\xb2\xe7\x8f\x12\xf5\xb0\xa7\xec\x4e\x77\xc8\x01\xc1\x20\x07\x77\xc7\x50\x4d\xec\x0b\xc1\x1f\x46\xd1\x0e\x6c\xb6\x6e\xd5\xc8\x35\x0a\xdf\xea\xca\x6d\x33\xbb\x56\x56\x4f\x3e\x94\xa8\xe4\xf1\x9c\xdc\x4d\x07\x9b\xca\x09\xfb\x87\x9d\x1e\xf7\x66\xc3\x2d\xbc\xd9\x5f\xbc\x1f\x18\x5d\x0d\xbc\x00\xc6\x97\x75\xf5\x1a\x1e\xac\xe1\xfb\xb1\xc4\xd6\xc4\x03\x80\xfd\x73\xc2\x27\xcb\xb7\x66\xce\xf1\xbc\x3a\x45\x14\x20\xf0\x06\x15\x38\xda\x01\xef\x01\x90\x0f\xde\x99\x1b\x71\x19\x2a\xb8\xf6\x65\x91\xcf\x94\xd6\x87\x9e\x11\x7d\x71\xf4\x65\x92\x50\x47\x7d\x7b\xa3\xe4\x34\x8b\x22\xd4\x7a\x99\xc5\xf1\x2d\xd0\x34\x8d\x6d\x57\x11\x78\xb3\x7b\x50\x05\x1e\x40\xdf\x6a\x83\x49\x64\x62\x60\x14\x13\x29\x88\x3f\xca\xb1\x77\x85\xb2\x1d\x55\x67\x82\x1b\x6d\x23\x6d\x3f\xf2\xa5\xeb\xd5\xc7\xa2\x90\x68\xb8\xef\x23\x9a\xe0\xc0\xf1\x78\xb3\xf6\xdb\x25\x55\x67\x7c\x71\x6e\x7b\x4d\xbd\x40\xe5\x1a\x54\xde\x5d\x54\xd3\x9e\xba\xab\x2e\x0a\x3b\x9d\x40\xa5\x47\xc0\xab\x57\x95\xef\x0a\xb5\xa1\xca\x00\x21\x42\x92\x45\x2c\xa3\x75\x55\xb6\xda\x9d\x2a\x8f\x07\x5c\x99\x63\xd9\xf1\x24\x8e\xc1\xbb\x41\xe1\x12\x15\x8a\x08\x19\x70\x61\x03\xb1\xe3\xe4\x56\x39\x1b\xfc\x1f\x49\xe9\x7b\xfa\x23\x75\xf0\x54\x0e\xbe\x84\x9e\x76\xaa\x2c\x79\x8c\x10\x51\x01\x0b\x84\x2c\x65\xd4\xa9\xbe\x90\xd7\x78\x02\x57\x68\x60\xa9\x50\xaf\x20\xca\x6f\x6c\x2d\xdf\xc5\x6d\x11\xaa\xe4\x51\x7d\x6b\xea\x22\x08\x7a\xa3\xd1\x78\xd6\x9b\x9d\x8e\x47\xf3\xc9\x70\x3a\xeb\x4d\x66\xf3\xe9\x5f\xd3\xd9\xf0\x7c\xe0\x28\xcf\x4d\xe9\xe1\x8d\x54\x6b\x54\xad\x2b\xaa\x18\x0a\x54\xbe\x01\xb7\x73\xbf\x12\x1f\x35\x46\x2c\x9d\xf2\x08\x75\x18\x04\x2f\x61\xa6\x6e\xed\x20\xb4\xe4\x82\xc1\x48\x32\x04\xb9\xf8\x86\x91\xb1\x77\x12\x30\x2b\xae\x21\xa1\x76\x2c\xc7\xbc\x09\x3e\xb7\x05\x96\x45\xb3\xd9\x7c\x1d\x8d\x07\xc3\x6e\xd8\x38\x6e\xcb\xd4\xb8\xbf\x0d\x2c\x27\xda\xe4\x21\x64\x5d\xee\xed\x86\x5f\xb7\xdb\xa7\x90\x37\x9b\xaf\xa1\x73\xad\xb0\x9a\x92\x18\x42\x0b\xa0\x04\x1a\xd4\x2d\x2e\xdb\x2b\xa9\x8d\xbb\x6f\x36\x8e\x8b\xc7\x66\x68\x67\xb4\x2b\x49\xec\xd8\x19\x53\x83\xee\x52\x62\x2f\x65\xdc\x60\xa2\x1d\x28\x1c\x73\xc1\xf0\x47\xb1\xf4\x6b\xb3\x95\xa0\xa1\xb6\x87\xb5\xf2\x44\xf6\x5b\x72\xb1\xc3\xd2\x54\x08\x3b\xaa\x73\x29\x34\x7c\x0e\x1b\xcf\x88\xd9\xe7\xd0\x16\x9d\xad\x99\xbf\x03\xdb\x6b\xee\xab\xae\x7c\x08\x9b\xd6\xd5\x41\x7e\x95\x76\x63\xca\x4f\x08\x1b\x36\x4a\x3b\x91\x03\xb0\x4b\xee\xfa\x14\x96\xf7\x27\x2f\x75\x07\xf4\x66\x0d\x47\x9b\x54\x71\x61\xa0\xf1\x7a\x7b\xd4\xf4\x65\xf5\x50\x85\xf9\x6c\x5c\xa8\xf7\x14\xc8\x6f\x39\x88\x2d\x10\x80\x97\xf0\xc9\x15\x54\x59\x3e\x6d\x97\xcb\xc4\xa7\x83\x9b\x2f\xe0\xde\x23\x76\x88\xae\x26\x2f\x5f\x42\x2a\xb5\xe6\x8b\x18\xeb\xcc\x74\x43\xb5\x9d\xd3\x5e\xbd\x2a\x72\xba\xb1\xf3\xc7\xce\x03\x3f\x3c\x91\xb8\x4f\xd7\x43\xae\x29\xfa\xbc\xad\x2a\x11\x1e\xb6\xaf\xbb\x3b\xee\x14\xaa\xd9\x84\x26\xf2\x1a\xd5\x8d\xe2\x06\x2b\x0e\x9b\xe4\x54\x9c\x97\x39\x14\x65\x6e\xed\x57\xf8\x3d\x43\x6d\x90\x59\x79\xa9\x8a\x6f\x96\x53\xcb\xa8\x3c\x12\x3b\x1b\x2c\x8d\x0c\x42\xdd\x3e\x69\x43\xfb\x2a\x6c\xfe\x01\xac\x7a\xab\xc9\xcf\xb6\xd7\xf7\x07\xc7\x43\xa3\x78\x60\x19\x5a\xa6\x79\x4e\xe6\x56\x42\xfb\xb0\x7f\x16\x0d\x27\x2c\x70\x43\x3b\x59\x18\x95\x59\x57\x30\x29\xec\xcf\xdf\x19\xaf\xc6\xe6\x19\xfa\x6f\x89\x9b\xb6\xfe\x17\x00\x00\xff\xff\x49\x69\xb7\xf8\x26\x15\x00\x00")

func scriptsExecuteCloudConfigTplShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsExecuteCloudConfigTplSh,
		"scripts/execute-cloud-config.tpl.sh",
	)
}

func scriptsExecuteCloudConfigTplSh() (*asset, error) {
	bytes, err := scriptsExecuteCloudConfigTplShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/execute-cloud-config.tpl.sh", size: 5414, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/execute-cloud-config.tpl.sh": scriptsExecuteCloudConfigTplSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"execute-cloud-config.tpl.sh": &bintree{scriptsExecuteCloudConfigTplSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
