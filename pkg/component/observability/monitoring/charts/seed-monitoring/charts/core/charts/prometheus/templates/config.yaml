apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{ .Release.Namespace }}
data:
  prometheus.yaml: |
    # All services in the {{ .Release.Namespace }} and that are annotated with
    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need to set this to `https` & most likely set the `tls_config` of the scrape config.
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: If the metrics are exposed on a different port to the service then set this appropriately. Use this when multiple ports are avaible by the pod.
    # * `prometheus.io/name`: job name label to be applied to all metrics from that service.
    # take note that there is a limit of 500 samples per target

    global:
      evaluation_interval: 1m
      scrape_interval: 1m
    {{- if .Values.remoteWrite }}
    {{- if .Values.remoteWrite.url }}
    remote_write:
    - url: {{ .Values.remoteWrite.url }}
    {{- if .Values.remoteWrite.basic_auth }}
      basic_auth:
        username: {{ .Values.remoteWrite.basic_auth.username }}
        password: {{ .Values.remoteWrite.basic_auth.password }}
    {{- end }}
    {{- if .Values.remoteWrite.keep }}
      write_relabel_configs:
{{ include "prometheus.keep-metrics.metric-relabel-config" .Values.remoteWrite.keep | indent 6 }}
    {{- end }}
    {{- if .Values.remoteWrite.queue_config }}
      queue_config:
{{ .Values.remoteWrite.queue_config | indent 8}}
    {{- end }}
    {{- end }}
    {{- end }}
    alerting:
      alertmanagers:
{{- if hasKey .Values.alerting.auth_type "none" }}
      - static_configs:
        - targets:
          - {{ .Values.alerting.auth_type.none.url }}
{{- end }}
{{- if hasKey .Values.alerting.auth_type "basic" }}
      - static_configs:
        - targets:
          - {{ .Values.alerting.auth_type.basic.url }}
        basic_auth:
          username: {{ .Values.alerting.auth_type.basic.username }}
          password: {{ .Values.alerting.auth_type.basic.password }}
{{- end }}
{{- if hasKey .Values.alerting.auth_type "certificate" }}
      - static_configs:
        - targets:
          - {{ .Values.alerting.auth_type.certificate.url }}
        tls_config:
          ca_file: /etc/prometheus/operator/ca.crt
          cert_file: /etc/prometheus/operator/tls.crt
          key_file: /etc/prometheus/operator/tls.key
          insecure_skip_verify: {{ .Values.alerting.auth_type.certificate.insecure_skip_verify }}
{{- end }}
      - kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
{{ include "prometheus.alertmanager.namespaces" . | indent 12 }}
        relabel_configs:
        - source_labels: [ __meta_kubernetes_service_label_component ]
          action: keep
          regex: alertmanager
        - source_labels: [ __meta_kubernetes_service_label_role ]
          action: keep
          regex: monitoring
        - source_labels: [ __meta_kubernetes_endpoint_port_name ]
          action: keep
          regex: metrics
      alert_relabel_configs:
      - source_labels: [ ignoreAlerts ]
        regex: true
        action: drop
    scrape_configs:
{{- if .Values.additionalScrapeConfigs }}
{{ toString .Values.additionalScrapeConfigs | indent 4 }}
{{- end }}
