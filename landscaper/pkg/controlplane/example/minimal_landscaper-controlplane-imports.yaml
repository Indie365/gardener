apiVersion: controlplane.gardener.landscaper.gardener.cloud/v1alpha1
kind: Imports
runtimeCluster:
  apiVersion: landscaper.gardener.cloud/v1alpha1
  kind: Target
  spec:
    type: landscaper.gardener.cloud/kubernetes-cluster
    config:
      kubeconfig: |
        ---
        apiVersion:...
        # here goes the kubeconfig of the runtime cluster


virtualGarden:
  enabled: false
  # specify when virtual garden option is enabled
  #kubeconfig:
  #  apiVersion: landscaper.gardener.cloud/v1alpha1
  #  kind: Target
  #  spec:
  #    type: landscaper.gardener.cloud/kubernetes-cluster
  #    config:
  #      kubeconfig: |
  #        ---
  #        apiVersion:...
  #        # here goes the kubeconfig of the virtual-garden cluster

internalDomain:
  provider: aws-route53
  domain: internal.test.domain
  credentials:
    AWS_ACCESS_KEY_ID: <very-secret>
    AWS_SECRET_ACCESS_KEY: <very-secret>


gardenerAPIserver:
  componentConfiguration:
    etcd:
      url: "virtual-garden-etcd-main-client.garden.svc:2379"

#     Optional: set CA (public) of Etcd cluster
#     caBundle: |
#     -----BEGIN CERTIFICATE-----
#     ...
#     -----END CERTIFICATE-----
#
#         This configuration is required if the etcd has client authentication enabled
#         client credentials have been signed by the etcd CA
#     clientCert: |
#     -----BEGIN CERTIFICATE-----
#     ...
#     -----END CERTIFICATE-----
#
#     clientKey: |
#     -----BEGIN RSA PRIVATE KEY-----
#     ...
#     -----END RSA PRIVATE KEY-----
#
#     Alternatively: set a secret reference to a secret in the runtime cluster containing
#     the PEM-encoded CA certificate and TLS serving certificates (keys: `ca.crt`, `tls.crt`, `tls.key`)
#    secretRef:
#      name:
#      namespace:
#
#    Optional: CA configuration of the Gardener API Server
#     ca:
#       crt: |
#       -----BEGIN CERTIFICATE-----
#       ...
#       -----END CERTIFICATE-----
#
#       Required to generate the TLS serving certificates only if ca/crt is provided and tls/crt is not
#       key: |
#       -----BEGIN RSA PRIVATE KEY-----
#       ...
#       -----END RSA PRIVATE KEY-----
#
#       Alternatively: set a secret reference to a secret in the runtime cluster containing
#       the PEM-encoded CA certificate (keys: `ca.crt`, optionally: `ca.key`)
#       secretRef:
#         name:
#         namespace:
#
#     Optional: set custom TLS certificates
#     tls:
#       crt: |
#          -----BEGIN CERTIFICATE-----
#          ...
#          -----END CERTIFICATE-----
#
#       key: |
#          -----BEGIN RSA PRIVATE KEY-----
#          ...
#          -----END RSA PRIVATE KEY-----
#
#       Alternatively: set a secret reference to a secret in the runtime cluster containing the PEM-encoded TLS serving certificates (keys: `tls.crt`, `tls.key`)
#       secretRef:
#         name:
#         namespace:

# Analogously to the Gardener API Server, you can provide a custom CA certificate and key and a custom TLS serving certificate
gardenerAdmissionController:
  enabled: true

# For the Gardener Controller Manager, analogously to the Gardener API Server, you can provide a custom TLS serving certificate